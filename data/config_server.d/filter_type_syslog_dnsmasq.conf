

#
# DNSMASQ
#
filter {

	if [type] == "syslog" and [program] == "dnsmasq" {

	 	#query[AAAA] server2.stu.rednut.net from 10.9.1.9
		# /etc/dnsmasq.hosts kibana.stu.rednut.net is 10.9.1.9
		# forwarded puppet.stu.rednut.net to 10.9.1.251
		# reply d2uzsrnmmf6tds.cloudfront.net is 54.192.8.66
		#forwarded d2uzsrnmmf6tds.cloudfront.net to 10.9.1.251
		# config server2 is NODATA-IPv6
		grok {
			match => [ "message", "config %{GREEDYDATA:dns_query} is %{GREEDYDATA:dns_query_answer}.*" ]
			add_field => [ "dns_query_type", "config" ]
			add_tag => [ "dnsmasq", "dns_query_config" ]
			tag_on_failure => []
		        break_on_match => true
		}

		grok {
			match => [ "message", "reply %{GREEDYDATA:dns_query} is %{GREEDYDATA:dns_query_answer}.*"]
			add_field => [ "dns_query_type", "reply" ]
                        add_tag => [ "dnsmasq", "dns_query" ]
                        tag_on_failure => []
			break_on_match => true
                }


                grok {
                        match => [ "message", "forwarded %{GREEDYDATA:dns_query} to %{GREEDYDATA:dns_query_resolver_ip}.*" ]
			add_field => [ "dns_query_type", "forward" ]
                        add_tag => [ "dnsmasq", "dns_query" ]
                        tag_on_failure => []
			break_on_match => true
                }


                grok {
                        match => [ "message", "query\\[%{DATA:dns_query_type}\\] %{GREEDYDATA:dns_query} from %{GREEDYDATA:dns_query_source_ip}.*" ]
			add_field => [ "dns_query_type", "query" ]
                        add_tag => [ "dnsmasq", "dns_query" ]
                        tag_on_failure => []
			break_on_match => true
                }
              	


		grok {
			match => [ "message", "%{GREEDYDATA:dns_hostfile} %{GREEDYDATA:dns_query} is %{GREEDYDATA:dns_query_answer}.*" ]
			add_field => [ "dns-query-type", "hostfile" ] 
                        add_tag => [ "dnsmasq", "dns_query" ]
                        tag_on_failure => []
			break_on_match => true
		}


		mutate {
			replace => [ "type", "dnsmasq" ]
		}
	}

}
